@page "/game"
@inject IGameServiсe GameService
@attribute [StreamRendering]

<PageTitle>Конкурсы</PageTitle>

<h2>Конкурсы</h2>
<MudDataGrid T="Game" Items="@Elements" ReadOnly="@_readOnly" EditMode="@(_isCellEditMode ? DataGridEditMode.Cell : DataGridEditMode.Form)"
             StartedEditingItem="@StartedEditingItem" CanceledEditingItem="@CanceledEditingItem" CommittedItemChanges="@CommittedItemChanges"
             Bordered="true" Dense="true" EditTrigger="@(_editTriggerRowClick ? DataGridEditTrigger.OnRowClick : DataGridEditTrigger.Manual)">
    <Columns>
        <PropertyColumn Property="x => x.StartDate" Title="Дата старта" Editable="false" />
        <PropertyColumn Property="x => x.TicketCount" Title="Количество билетов" />
        <PropertyColumn Property="x => x.Price" Title="Цена (сомони)" />
        <PropertyColumn Property="x => x.Text" Title="Описание" Hidden="true" />
        <TemplateColumn Hidden="@(_isCellEditMode || _readOnly || _editTriggerRowClick)" CellClass="d-flex justify-end">
            <CellTemplate>
                <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@context.Actions.StartEditingItemAsync" />
            </CellTemplate>
        </TemplateColumn>
    </Columns>
</MudDataGrid>

@code {
    private IEnumerable<Game> Elements = new List<Game>();
    private bool _readOnly;
    private bool _isCellEditMode;
    private List<string> _events = new();
    private bool _editTriggerRowClick;

    protected override async Task OnInitializedAsync()
    {
        Elements = await GameService.GetAllGames();
    }

    // events
    void StartedEditingItem(Game item)
    {
        Console.WriteLine("start");
    }

    void CanceledEditingItem(Game item)
    {
        Console.WriteLine("cancel");
    }

    void CommittedItemChanges(Game item)
    {
        Console.WriteLine("commit");
    }
}